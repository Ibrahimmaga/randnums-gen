"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const performPublishConfigOverrides_1 = require("../../publish/performPublishConfigOverrides");
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
describe('perform publishConfig overrides', () => {
    function createFixture(publishConfig = {}) {
        const tmpDir = fs.mkdtempSync(path.join(os.tmpdir(), 'beachball-publishConfig'));
        const fixturePackageJson = {
            name: 'foo',
            version: '1.0.0',
            main: 'src/index.ts',
            bin: {
                'foo-bin': 'src/foo-bin.js',
            },
            publishConfig,
        };
        const packageInfos = {
            foo: {
                combinedOptions: { defaultNpmTag: 'latest', disallowedChangeTypes: [], gitTags: true, tag: 'latest' },
                name: 'foo',
                packageJsonPath: path.join(tmpDir, 'package.json'),
                packageOptions: {},
                private: false,
                version: '1.0.0',
            },
        };
        fs.writeFileSync(path.join(tmpDir, 'package.json'), JSON.stringify(fixturePackageJson));
        return { packageInfos, tmpDir };
    }
    function cleanUp(tmpDir) {
        fs.rmdirSync(tmpDir, { recursive: true });
    }
    it('overrides accepted keys', () => {
        const { packageInfos, tmpDir } = createFixture({
            main: 'lib/index.js',
            types: 'lib/index.d.ts',
        });
        const original = JSON.parse(fs.readFileSync(packageInfos['foo'].packageJsonPath, 'utf-8'));
        expect(original.main).toBe('src/index.ts');
        expect(original.types).toBeUndefined();
        performPublishConfigOverrides_1.performPublishConfigOverrides(['foo'], packageInfos);
        const modified = JSON.parse(fs.readFileSync(packageInfos['foo'].packageJsonPath, 'utf-8'));
        expect(modified.main).toBe('lib/index.js');
        expect(modified.types).toBe('lib/index.d.ts');
        expect(modified.publishConfig.main).toBeUndefined();
        expect(modified.publishConfig.types).toBeUndefined();
        cleanUp(tmpDir);
    });
    it('should always at least accept types, main, and module', () => {
        expect(performPublishConfigOverrides_1.acceptedKeys).toContain('main');
        expect(performPublishConfigOverrides_1.acceptedKeys).toContain('module');
        expect(performPublishConfigOverrides_1.acceptedKeys).toContain('types');
    });
});
//# sourceMappingURL=performPublishConfigOverrides.test.js.map