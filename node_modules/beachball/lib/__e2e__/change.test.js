"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const repository_1 = require("../fixtures/repository");
const workspace_tools_1 = require("workspace-tools");
const change_1 = require("../commands/change");
const paths_1 = require("../paths");
describe('change command', () => {
    let repositoryFactory;
    function getChangeFiles(cwd) {
        const changePath = paths_1.getChangePath(cwd);
        const changeFiles = changePath && fs_extra_1.default.existsSync(changePath) ? fs_extra_1.default.readdirSync(changePath) : [];
        return changeFiles;
    }
    afterEach(() => __awaiter(void 0, void 0, void 0, function* () {
        if (repositoryFactory) {
            repositoryFactory.cleanUp();
            repositoryFactory = undefined;
        }
    }));
    it('create change file but git stage only', () => __awaiter(void 0, void 0, void 0, function* () {
        repositoryFactory = new repository_1.RepositoryFactory();
        yield repositoryFactory.create();
        const repo = yield repositoryFactory.cloneRepository();
        yield repo.commitChange('packages/pkg-1/package.json', JSON.stringify({
            name: 'pkg-1',
            version: '1.0.0',
        }));
        yield change_1.change({
            type: 'minor',
            dependentChangeType: 'patch',
            package: 'pkg-1',
            message: 'stage me please',
            path: repo.rootPath,
            commit: false,
        });
        const output = workspace_tools_1.git(['status', '-s'], { cwd: repo.rootPath });
        expect(output.success).toBeTruthy();
        expect(output.stdout.startsWith('A')).toBeTruthy();
        const changeFiles = getChangeFiles(repo.rootPath);
        expect(changeFiles.length).toBe(1);
    }));
    it('create change file and commit', () => __awaiter(void 0, void 0, void 0, function* () {
        repositoryFactory = new repository_1.RepositoryFactory();
        yield repositoryFactory.create();
        const repo = yield repositoryFactory.cloneRepository();
        yield repo.commitChange('packages/pkg-1/package.json', JSON.stringify({
            name: 'pkg-1',
            version: '1.0.0',
        }));
        yield change_1.change({
            type: 'minor',
            dependentChangeType: 'patch',
            package: 'pkg-1',
            message: 'commit me please',
            path: repo.rootPath,
        });
        const output = workspace_tools_1.git(['status', '-s'], { cwd: repo.rootPath });
        expect(output.success).toBeTruthy();
        expect(output.stdout.length).toBe(0);
        const changeFiles = getChangeFiles(repo.rootPath);
        expect(changeFiles.length).toBe(1);
    }));
});
//# sourceMappingURL=change.test.js.map