"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const repository_1 = require("../fixtures/repository");
const process = __importStar(require("process"));
const util_1 = require("util");
const getOptions_1 = require("../options/getOptions");
const writeFileAsync = util_1.promisify(fs_extra_1.default.writeFile);
const baseArgv = ['node.exe', 'bin.js'];
describe('config', () => {
    it('uses the branch name defined in beachball.config.js', () => __awaiter(void 0, void 0, void 0, function* () {
        const repositoryFactory = new repository_1.RepositoryFactory();
        yield repositoryFactory.create();
        const repo = yield repositoryFactory.cloneRepository();
        const config = yield inDirectory(repo.root, () => __awaiter(void 0, void 0, void 0, function* () {
            yield writeConfig('module.exports = { branch: "origin/main" };');
            return getOptions_1.getOptions(baseArgv);
        }));
        expect(config.branch).toEqual('origin/main');
    }));
});
it('--config overrides configuration path', () => __awaiter(void 0, void 0, void 0, function* () {
    const repositoryFactory = new repository_1.RepositoryFactory();
    yield repositoryFactory.create();
    const repo = yield repositoryFactory.cloneRepository();
    const config = yield inDirectory(repo.root, () => __awaiter(void 0, void 0, void 0, function* () {
        yield writeConfig('module.exports = { branch: "origin/main" };');
        yield writeFileAsync('alternate.config.js', 'module.exports = { branch: "origin/foo" };');
        return getOptions_1.getOptions([...baseArgv, '--config', 'alternate.config.js']);
    }));
    expect(config.branch).toEqual('origin/foo');
}));
const writeConfig = (contents) => __awaiter(void 0, void 0, void 0, function* () {
    yield writeFileAsync('beachball.config.js', contents);
});
const inDirectory = (directory, cb) => __awaiter(void 0, void 0, void 0, function* () {
    const originalDirectory = process.cwd();
    process.chdir(directory);
    try {
        return yield cb();
    }
    finally {
        process.chdir(originalDirectory);
    }
});
//# sourceMappingURL=config.test.js.map