"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const getChangedPackages_1 = require("../changefile/getChangedPackages");
const writeChangeFiles_1 = require("../changefile/writeChangeFiles");
const workspace_tools_1 = require("workspace-tools");
const bump_1 = require("../commands/bump");
const getPackageInfos_1 = require("../monorepo/getPackageInfos");
const paths_1 = require("../paths");
const multiMonorepo_1 = require("../fixtures/multiMonorepo");
describe('changed files', () => {
    let repositoryFactory;
    afterEach(() => __awaiter(void 0, void 0, void 0, function* () {
        if (repositoryFactory) {
            repositoryFactory.cleanUp();
            repositoryFactory = undefined;
        }
    }));
    it('detects changed files in workspace', () => __awaiter(void 0, void 0, void 0, function* () {
        repositoryFactory = new multiMonorepo_1.MultiMonoRepoFactory();
        repositoryFactory.create();
        const repo = repositoryFactory.cloneRepository();
        const repoARoot = path_1.default.join(repo.rootPath, 'repo-a');
        const repoBRoot = path_1.default.join(repo.rootPath, 'repo-b');
        const testFilePath = path_1.default.join(repoARoot, 'packages/foo/test.js');
        fs_extra_1.default.writeFileSync(testFilePath, '');
        workspace_tools_1.git(['add', testFilePath], { cwd: repoARoot });
        const changedPackagesA = getChangedPackages_1.getChangedPackages({
            fetch: false,
            path: repoARoot,
            branch: 'master',
        });
        const changedPackagesB = getChangedPackages_1.getChangedPackages({
            fetch: false,
            path: repoBRoot,
            branch: 'master',
        });
        const changedPackagesRoot = getChangedPackages_1.getChangedPackages({
            fetch: false,
            path: repo.rootPath,
            branch: 'master',
        });
        expect(changedPackagesA).toStrictEqual(['foo']);
        expect(changedPackagesB).toStrictEqual([]);
        expect(changedPackagesRoot).toStrictEqual(['foo']);
    }));
});
describe('version bumping', () => {
    let repositoryFactory;
    function getChangeFiles(cwd) {
        const changePath = paths_1.getChangePath(cwd);
        const changeFiles = changePath && fs_extra_1.default.existsSync(changePath) ? fs_extra_1.default.readdirSync(changePath) : [];
        return changeFiles;
    }
    afterEach(() => __awaiter(void 0, void 0, void 0, function* () {
        if (repositoryFactory) {
            repositoryFactory.cleanUp();
            repositoryFactory = undefined;
        }
    }));
    it('only bumps workspace package', () => __awaiter(void 0, void 0, void 0, function* () {
        repositoryFactory = new multiMonorepo_1.MultiMonoRepoFactory();
        repositoryFactory.create();
        const repo = repositoryFactory.cloneRepository();
        const repoARoot = path_1.default.join(repo.rootPath, 'repo-a');
        const repoBRoot = path_1.default.join(repo.rootPath, 'repo-b');
        writeChangeFiles_1.writeChangeFiles({
            foo: {
                type: 'minor',
                comment: 'test',
                email: 'test@test.com',
                packageName: 'foo',
                dependentChangeType: 'patch',
            },
        }, repoARoot);
        writeChangeFiles_1.writeChangeFiles({
            foo: {
                type: 'major',
                comment: 'test',
                email: 'test@test.com',
                packageName: 'foo',
                dependentChangeType: 'patch',
            },
        }, repoBRoot);
        workspace_tools_1.git(['push', 'origin', 'master'], { cwd: repo.rootPath });
        yield bump_1.bump({ path: repoARoot, bumpDeps: true });
        const packageInfosA = getPackageInfos_1.getPackageInfos(repoARoot);
        const packageInfosB = getPackageInfos_1.getPackageInfos(repoBRoot);
        expect(packageInfosA['foo'].version).toBe('1.1.0');
        expect(packageInfosB['foo'].version).toBe('1.0.0');
        const changeFilesA = getChangeFiles(repoARoot);
        const changeFilesB = getChangeFiles(repoBRoot);
        expect(changeFilesA.length).toBe(0);
        expect(changeFilesB.length).toBe(1);
    }));
});
//# sourceMappingURL=multiMonorepo.test.js.map